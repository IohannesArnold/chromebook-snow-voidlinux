#!/bin/bash

## re-sign kernel in case you want to change bootstring
    echo "
You may re-sign kernel and customize kernel boot string. 
Regular user do not need it, so it is safe to enter 'n'.
Do you want to do this? (y/n)
"
    read -r tmpvar1 
    if $(echo $tmpvar1 | grep -q [Yy]); then
        bootcmd='console=tty0 init=/usr/bin/runit-init root=PARTUUID=%U/PARTNROFF=1 rootwait rw noinitrd zswap.compressor=zstd zswap.max_pool_percent=40 audit=0'
        echo "default bootcmd is
        
$bootcmd

Be very careful, without init=/usr/bin/runit-init root=PARTUUID=%U/PARTNROFF=1 
or something like that your could get a bootfail.
Now you may specify a new one or just press Enter"
        tmpvar2=""
        read -r tmpvar2
        if [ ! -z "$tmpvar2" ]; then
            bootcmd="$tmpvar2"
	else
	    echo will be used default boot string
	fi
            
        # make kernel.its
        echo '
/dts-v1/;

/ {
    description = "Chrome OS kernel image with one or more FDT blobs";
    #address-cells = <1>;
    images {
        kernel@1 {
            description = "kernel";
            data = /incbin/("/boot/zImage");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            load = <0>;
            entry = <0>;
        };
        fdt@1 {
            description = "exynos5250-snow.dtb";
            data = /incbin/("/boot/dtbs/exynos5250-snow.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1 {
                algo = "sha1";
            };
        };
        fdt@2 {
            description = "exynos5250-snow-rev5.dtb";
            data = /incbin/("/boot/dtbs/exynos5250-snow-rev5.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1 {
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1 {
            kernel = "kernel@1";
            fdt = "fdt@1";
        };
        conf@2 {
            kernel = "kernel@1";
            fdt = "fdt@2";
        };
    };
};
            '> /tmp/kernel.its
            
            #
            mkimage -D "-I dts -O dtb -p 2048" -f /tmp/kernel.its /tmp/vmlinux.uimg
        
            # make empty bootloader
            dd if=/dev/zero of=/tmp/bootloader.bin bs=512 count=1
        
            echo $bootcmd > /tmp/cmdline
            
            # backup default vmlinux.kpart
            mv -f /boot/vmlinux.kpart /boot/backup_vmlinux.kpart
            
            # final step
            vbutil_kernel \
            --pack /boot/vmlinux.kpart \
            --version 1 \
            --vmlinuz /tmp/vmlinux.uimg \
            --arch arm \
            --keyblock /boot/resign/kernel.keyblock \
            --signprivate /boot/resign/kernel_data_key.vbprivk \
            --config /tmp/cmdline \
            --bootloader /tmp/bootloader.bin
            
            # clear used files
            rm -f /tmp/vmlinux.uimg /tmp/kernel.keyblock /tmp/kernel_data_key.vbprivk /tmp/cmdline /tmp/bootloader.bin
    fi
  
## flash kernel
  krnprts=""
  krnprtc=0
  for i in $(ls /dev | grep -x --regexp="mmcblk[0-9]" --regexp="sd[a-z]" --regexp="vd[a-z]"); do
    if $(cgpt show /dev/$i | grep Label | grep -q [Kk]ernel); then
      if $(echo $i | grep -q mmcblk); then
        krnprts+="$i""p$(cgpt show /dev/$i | grep Label | grep [Kk]ernel -m 1 | sed 's/  / /g' | sed 's/  / /g' | sed 's/ La.*//g' | sed 's/.* //g') "
      else
        krnprts+="$i$(cgpt show /dev/$i | grep Label | grep [Kk]ernel -m 1 | sed 's/  / /g' | sed 's/  / /g' | sed 's/ La.*//g' | sed 's/.* //g') "
      fi
      krnprtc=$(($krnprtc+1))
    fi
  done
  
  echo ""
  if [ "$krnprtc" -eq 0 ]; then
    echo "ChromeOs kernel partition did not detected." 
    echo "You must reflash kernel manually."
  elif [ "$krnprtc" -eq 1 ]; then
    echo "Finded ChromeOs kernel partition - $krnprts"
    echo "Do you want to flash a new kernel to it? (y/n)"
    read -r shouldwe
    if [[ $shouldwe =~ ^([yY][eE][sS]|[yY])$ ]]; then
      dd if=/boot/vmlinux.kpart of=/dev/$krnprts
      sync
    else
      echo "You may flash kernel manually like:"
      echo "dd if=/boot/vmlinux.kpart of=/dev/$krnprts"
    fi
  else
    echo "Finded more than one ChromeOs kernel partition."
    echo "You need to select next action
    "
    echo "0 for do not flash"
    numpart=0
    for i in $krnprts; do
      numpart=$(($numpart+1))
      echo "$numpart for flash $i partition"
    done
    echo ""
    echo "Wrong partition may lead to bootfail or disk fail. Be aware!"
    read -r shouldwe
    if [ $shouldwe -gt 0 ]&&[ $shouldwe -le $numpart ]; then
      numpart=0
      for i in $krnprts; do
        numpart=$(($numpart+1))
        if [ $numpart -eq $shouldwe ]; then
          dd if=/boot/vmlinux.kpart of=/dev/$i
          sync
        fi
      done
    fi
  fi

echo '
to repeat this actions run /etc/kernel.d/post-install/10-flashkernel with root priveleges
'
