# forked from https://github.com/archlinuxarm/PKGBUILDs/tree/master/core/linux-armv7

pkgbase=linux-xe303c12
pkgname=$pkgbase
_kernelname=${pkgbase#linux}
_desc="ARMv7 XE303C12-platform"
pkgver=5.13.12
_srcname=linux-${pkgver}
pkgrel=2
rcnver=5.13.2
rcnrel=armv7-x11
arch=('armv7h')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'uboot-tools' 'vboot-utils' 'dtc' 'flex' 'make' 'gcc' 'fakeroot' 'bison')
options=('!strip')
MAKEFLAGS="-j$(grep 'model name' /proc/cpuinfo --count)"
source=("http://www.kernel.org/pub/linux/kernel/v5.x/${_srcname}.tar.xz"
        "http://rcn-ee.com/deb/stretch-armhf/v${rcnver}-${rcnrel}/patch-${rcnver%.0}-${rcnrel}.diff.xz"
        'https://raw.githubusercontent.com/archlinuxarm/PKGBUILDs/master/core/linux-armv7/0004-fix-mvsdio-eMMC-timing.patch'
        'config'
        'kernel.its'
        'https://github.com/archlinuxarm/PKGBUILDs/raw/master/core/linux-armv7/kernel.keyblock'
        'https://github.com/archlinuxarm/PKGBUILDs/raw/master/core/linux-armv7/kernel_data_key.vbprivk'
)
md5sums=('SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' )

prepare() {
  cd "${srcdir}/${_srcname}"

  # RCN patch
  git apply ../patch-${rcnver%.0}-${rcnrel}.diff

  # ALARM patches
  git apply ../0004-fix-mvsdio-eMMC-timing.patch

  cat "${srcdir}/config" > ./.config

  # add pkgrel to extraversion
  sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh
}

build() {

  cd "${srcdir}/${_srcname}"
  make ${MAKEFLAGS} prepare
  make ${MAKEFLAGS} menuconfig

  ff=" -O2 -pipe -march=armv7-a+mp+neon-vfpv4 -mtune=cortex-a15 --param l1-cache-size=64 --param l2-cache-size=1024 -mfpu=neon-vfpv4 -fno-plt -fno-strict-aliasing -faggressive-loop-optimizations -fcombine-stack-adjustments -fcprop-registers -fcrossjumping -fdce -fdelayed-branch -fdelete-dead-exceptions -fdelete-null-pointer-checks -fdse -fforward-propagate -fgcse -fgcse-after-reload -fguess-branch-probability -fif-conversion2 -fipa-sra -fira-hoist-pressure -fira-loop-pressure -fira-share-save-slots -fivopts -fjump-tables -floop-interchange -floop-nest-optimize -floop-unroll-and-jam -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen -fpeel-loops -fpeephole -fpeephole2 -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return -frename-registers -frerun-cse-after-loop -fschedule-fusion -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fshrink-wrap-separate -fsimd-cost-model=dynamic -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fssa-backprop -fssa-phiopt -fstdarg-opt -fthread-jumps -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp -ftree-cselim -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-loop-distribution -ftree-loop-optimize -ftree-loop-vectorize -ftree-pre -ftree-slp-vectorize -ftree-vectorize -funroll-loops -fvect-cost-model=dynamic"

  export CFLAGS+="$ff" 
  export CXXFLAGS+="$ff"
  
  echo force custom flags
  for tmpcycle in $(find -name Makefile); do
    sed -i "s/armv7-a/armv7-a+mp+neon-vfpv4 -mtune=cortex-a15 --param l1-cache-size=64 --param l2-cache-size=1024 -mfpu=neon-vfpv4 -fno-plt -faggressive-loop-optimizations -fguess-branch-probability -floop-nest-optimize -fomit-frame-pointer -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fpredictive-commoning -fprefetch-loop-arrays -ftree-loop-optimize/g" $tmpcycle
    sed -i "s/vfpv /vfpv4 /g" $tmpcycle
    sed -i "s/vfpv,/vfpv4,/g" $tmpcycle
    sed -i "s/-Os/-O2/g" $tmpcycle
    sed -i "s/-O2/-O2 -march=armv7-a+mp+neon-vfpv4 -mtune=cortex-a15 --param l1-cache-size=64 --param l2-cache-size=1024 -mfpu=neon-vfpv4 -fno-plt -faggressive-loop-optimizations -fguess-branch-probability -floop-nest-optimize -fomit-frame-pointer -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fpredictive-commoning -fprefetch-loop-arrays -ftree-loop-optimize /g" $tmpcycle
  done
 
  make ${MAKEFLAGS} zImage modules exynos5250-snow.dtb exynos5250-snow-rev5.dtb
}

package() {
  pkgdesc="The Linux Kernel, flash image, modules and headers for samsung/google snow XE303C12 chromebook - ${_desc}"
  depends=('coreutils' 'kmod' 'uboot-tools' 'vboot-utils')
  optdepends=('linux-xe303c12-firmware: contains the necessary firmwares for the xe303c12 chromebook, takes up 5M or something' 
    'linux-firmware: contains all available firmwares, takes up 500M or something'
    'crda: to set the correct wireless channels of your country' 
    'mkinitcpio>=0.7: not needed for this kernel actually')
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  provides=("linux=${pkgver}" "WIREGUARD-MODULE" "linux-headers=${pkgver}" )
  conflicts=('linux' 'linux-headers' )
  replaces=('linux-armv7' 'linux-armv7-chromebook' 'linux-armv7-rc-chromebook' 'linux-armv7-rc' 'linux-armv7-rc-chromebook' 'linux-armv7-headers' 'linux-armv7-chromebook-headers' 'linux-armv7-rc-chromebook-headers' 'linux-armv7-rc-headers' 'linux-armv7-rc-chromebook-headers')

  cd "${srcdir}/${_srcname}"

  KARCH=arm

  # get kernel version
  _kernver="$(make kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{boot,usr/lib/modules}
  make ${MAKEFLAGS} INSTALL_MOD_PATH="${pkgdir}/usr" modules_install
  
  # make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install
  # custom builded dtb will be installed manually
  install -D arch/$KARCH/boot/dts/exynos5250-snow.dtb -m755 "${pkgdir}/boot/dtbs/exynos5250-snow.dtb"
  install -D arch/$KARCH/boot/dts/exynos5250-snow-rev5.dtb -m755 "${pkgdir}/boot/dtbs/exynos5250-snow-rev5.dtb"
  
  cp arch/$KARCH/boot/zImage "${pkgdir}/boot/zImage"

  # make room for external modules
  local _extramodules="extramodules-${_basekernel}${_kernelname}"
  ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

  # add real version for building modules and running depmod from hook
  echo "${_kernver}" |
    install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

  # remove build and source links
  rm "${pkgdir}"/usr/lib/modules/${_kernver}/{source,build}

  # now we call depmod...
  depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"

## gen kernel flash script
echo 'flash_kernel() {
  krnprts=""
  krnprtc=0
  for i in $(ls /dev | grep -x --regexp="mmcblk[0-9]" --regexp="sd[a-z]" --regexp="vd[a-z]"); do
    if $(cgpt show /dev/$i | grep Label | grep -q [Kk]ernel); then
      if $(echo $i | grep -q mmcblk); then
        krnprts+="$i""p$(cgpt show /dev/$i | grep Label | grep [Kk]ernel -m 1 | sed '"'"'s/  / /g'"'"' | sed '"'"'s/  / /g'"'"' | sed '"'"'s/ La.*//g'"'"' | sed '"'"'s/.* //g'"'"') "
      else
        krnprts+="$i$(cgpt show /dev/$i | grep Label | grep [Kk]ernel -m 1 | sed '"'"'s/  / /g'"'"' | sed '"'"'s/  / /g'"'"' | sed '"'"'s/ La.*//g'"'"' | sed '"'"'s/.* //g'"'"') "
      fi
      krnprtc=$(($krnprtc+1))
    fi
  done
  
  echo ""
  if [ "$krnprtc" -eq 0 ]; then
    echo "Chrome OS kernel partition did not detected." 
    echo "You must reflash kernel manually."
  elif [ "$krnprtc" -eq 1 ]; then
    echo "Finded ChromeOs kernel partition - $krnprts"
    echo "Do you want to flash a new kernel to it? (y/n)"
    read -r shouldwe
    if [[ $shouldwe =~ ^([yY][eE][sS]|[yY])$ ]]; then
      dd if=/boot/vmlinux.kpart of=/dev/$krnprts
      sync
    else
      echo "You may flash kernel manually like:"
      echo "dd if=/boot/vmlinux.kpart of=/dev/$krnprts"
    fi
  else
    echo "Finded more than one Chrome OS kernel partition."
    echo "You need to select next action
    "
    echo "0 for do not flash"
    numpart=0
    for i in $krnprts; do
      numpart=$(($numpart+1))
      echo "$numpart for flash $i partition"
    done
    echo ""
    echo "Wrong partition may lead to bootfail. Be aware!"
    read -r shouldwe
    if [ $shouldwe -gt 0 ]&&[ $shouldwe -le $numpart ]; then
      numpart=0
      for i in $krnprts; do
        numpart=$(($numpart+1))
        if [ $numpart -eq $shouldwe ]; then
          dd if=/boot/vmlinux.kpart of=/dev/$i
          sync
        fi
      done
    fi
  fi
}

custom_resign(){
    echo "
You may re-sign kernel and customize kernel boot string. 
It require active internet connection. 
Regular user do not need it, so it is safe to press n.
Do you want to do this? (y/n)
"
    read -r tmpvar1 
    if $(echo $tmpvar1 | grep -q [Yy]); then
        bootcmd='"'console=tty0 init=/sbin/init root=PARTUUID=%U/PARTNROFF=1 rootwait rw noinitrd zswap.compressor=zstd zswap.max_pool_percent=40 audit=0'"'
        echo "default bootcmd is
        
$bootcmd

Be very careful, without init=/sbin/init root=PARTUUID=%U/PARTNROFF=1 
or something like that your could get a bootfail.
Now you may specify a new one or just press Enter"
        tmpvar2=""
        read -r tmpvar2
        if [ ! -z "$tmpvar2" ]; then
            bootcmd="$tmpvar2"
        else
    	    echo "There is no sense to re-sign completly same kernel, this operation aborted. 
Will be used vmlinux.kpart from package."
    	    return
        fi
        
        # make kernel.its
        echo '"'"'
/dts-v1/;

/ {
    description = "Chrome OS kernel image with one or more FDT blobs";
    #address-cells = <1>;
    images {
        kernel@1 {
            description = "kernel";
            data = /incbin/("/boot/zImage_");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            load = <0>;
            entry = <0>;
        };
        fdt@1 {
            description = "exynos5250-snow.dtb";
            data = /incbin/("/boot/dtbs/exynos5250-snow.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1 {
                algo = "sha1";
            };
        };
        fdt@2 {
            description = "exynos5250-snow-rev5.dtb";
            data = /incbin/("/boot/dtbs/exynos5250-snow-rev5.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1 {
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1 {
            kernel = "kernel@1";
            fdt = "fdt@1";
        };
        conf@2 {
            kernel = "kernel@1";
            fdt = "fdt@2";
        };
    };
};
        '"'"'> /tmp/kernel.its
        
        #
        mkimage -D "-I dts -O dtb -p 2048" -f /tmp/kernel.its /tmp/vmlinux.uimg
        
        # download required files
        curl -o "/tmp/kernel.keyblock" "https://raw.githubusercontent.com/archlinuxarm/PKGBUILDs/master/core/linux-armv7/kernel.keyblock"
        curl -o "/tmp/kernel_data_key.vbprivk" "https://raw.githubusercontent.com/archlinuxarm/PKGBUILDs/master/core/linux-armv7/kernel_data_key.vbprivk"
                
        # make empty bootloader
        dd if=/dev/zero of=/tmp/bootloader.bin bs=512 count=1
        
        echo $bootcmd > /tmp/cmdline
        
        # backup default vmlinux.kpart
        mv -f /boot/vmlinux.kpart /boot/backup_vmlinux.kpart
        
        # final step
        vbutil_kernel \
        --pack /boot/vmlinux.kpart \
        --version 1 \
        --vmlinuz /tmp/vmlinux.uimg \
        --arch arm \
        --keyblock /tmp/kernel.keyblock \
        --signprivate /tmp/kernel_data_key.vbprivk \
        --config /tmp/cmdline \
        --bootloader /tmp/bootloader.bin
        
        # clear used files
        rm -f /tmp/vmlinux.uimg /tmp/kernel.keyblock /tmp/kernel_data_key.vbprivk /tmp/cmdline /tmp/bootloader.bin
    fi
}

post_install () {
  custom_resign
  flash_kernel
}
post_upgrade() {
  custom_resign
  flash_kernel
}

post_remove() {
  rm -f boot/initramfs-linux.img
  rm -f boot/backup_vmlinux.kpart
}
' >../../${pkgbase}.pkg
  
true && install=${pkgbase}.pkg   

## install mkinitcpio preset file...
echo "# mkinitcpio preset file for the '${pkgbase}' package

#ALL_config='/etc/mkinitcpio.conf'
#ALL_kver='${_kernver}'

#PRESETS=('default')

#default_config='/etc/mkinitcpio.conf'
#default_image='/boot/initramfs-linux.img'
#default_options=''
" | install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"
    
## install pacman hooks
echo "[Trigger]
Type = File
Operation = Install
Operation = Upgrade
Operation = Remove
Target = usr/lib/modules/${_kernver}/*
Target = usr/lib/modules/${_extramodules}/*

[Action]
Description = Updating ${pkgbase} module dependencies...
When = PostTransaction
Exec = /usr/bin/depmod ${_kernver}
" | install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"

## not needed because kernel do not use initrd
# echo "[Trigger]
# Type = File
# Operation = Install
# Operation = Upgrade
# Target = boot/zImage
# Target = usr/lib/initcpio/*
# 
# [Action]
# Description = Updating ${pkgbase} initcpios...
# When = PostTransaction
# Exec = /usr/bin/mkinitcpio -p ${pkgbase}
# " | install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"

## include headers

  #for i in $(ls include/); do
  #  cp -a include/${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/include/"
  #done


  cd "${srcdir}/${_srcname}"
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
 # install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s arch/$KARCH/kernel/module.lds

  cp -t "${_builddir}/arch/${KARCH}" -a arch/${KARCH}/include
  for i in dove exynos omap2; do
    mkdir -p "${_builddir}/arch/${KARCH}/mach-${i}"
    #cp -t "${_builddir}/arch/${KARCH}/mach-${i}" -a arch/$KARCH/mach-${i}/include
  done
  for i in omap orion versatile; do
    mkdir -p "${_builddir}/arch/${KARCH}/plat-${i}"
    cp -t "${_builddir}/arch/${KARCH}/plat-${i}" -a arch/$KARCH/plat-${i}/include
  done

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */${KARCH}/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # remove now broken symlinks
  find -L "${_builddir}" -type l -printf 'Removing %P\n' -delete

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    /usr/bin/strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)

## include kernel flash image
  cd "${srcdir}/${_srcname}"
  cp ../kernel.its .
  mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg
  dd if=/dev/zero of=bootloader.bin bs=512 count=1
  echo 'console=tty0 init=/sbin/init root=PARTUUID=%U/PARTNROFF=1 rootwait rw noinitrd zswap.compressor=zstd zswap.max_pool_percent=40 audit=0' > cmdline
  vbutil_kernel \
    --pack vmlinux.kpart \
    --version 1 \
    --vmlinuz vmlinux.uimg \
    --arch arm \
    --keyblock ../kernel.keyblock \
    --signprivate ../kernel_data_key.vbprivk \
    --config cmdline \
    --bootloader bootloader.bin
  #mkdir -p "${pkgdir}/boot"
  cp vmlinux.kpart "${pkgdir}/boot"       
}
